package main

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestLoadData(t *testing.T) {
	tests := map[string]struct {
		input  string
		output map[asteroid]bool
	}{
		"one": {
			input: "sample.txt",
			output: map[asteroid]bool{
				{rowID: 0, colID: 1}: true,
				{rowID: 0, colID: 4}: true,
				{rowID: 2, colID: 0}: true,
				{rowID: 2, colID: 1}: true,
				{rowID: 2, colID: 2}: true,
				{rowID: 2, colID: 3}: true,
				{rowID: 2, colID: 4}: true,
				{rowID: 3, colID: 4}: true,
				{rowID: 4, colID: 3}: true,
				{rowID: 4, colID: 4}: true,
			},
		},
	}
	for name, tc := range tests {
		t.Run(name, func(t *testing.T) {
			actual := loadData(tc.input)
			assert.Equal(t, tc.output, actual)
		})
	}
}

func TestVisible(t *testing.T) {
	tests := map[string]struct {
		input  map[asteroid]bool
		output base
	}{
		"one": {
			input: loadData("sample.txt"),
			output: base{count: 8, location: asteroid{colID: 3, rowID: 4}, angles: map[float64]int{
				90: 1, 135: 1, 153.43494882292202: 1, 165.9637565320735: 1,
				180: 1, 206.565051177078: 2, 225: 1, 236.30993247402023: 1,
			}},
		},
		"two": {
			input: loadData("sample2.txt"),
			output: base{count: 210, location: asteroid{colID: 11, rowID: 13}, angles: map[float64]int{
				0: 3, 9.462322208025626: 1, 11.30993247402023: 1,
				14.036243467926454: 1, 18.434948822922024: 2, 21.801409486351815: 1,
				26.565051177077976: 2, 30.963756532073546: 1, 33.69006752597977: 1,
				36.86989764584405: 1, 38.65980825409008: 1, 45: 2,
				49.39870535499551: 1, 50.19442890773479: 1, 53.13010235415595: 2,
				54.462322208025626: 1, 56.30993247402023: 2, 57.994616791916485: 1,
				59.03624346792651: 1, 60.25511870305775: 1, 63.434948822922024: 3,
				66.80140948635182: 1, 68.19859051364818: 1, 69.44395478041656: 1,
				71.56505117707798: 1, 74.05460409907715: 1, 75.96375653207349: 2,
				78.69006752597977: 1, 80.53767779197437: 1, 81.86989764584405: 1,
				82.8749836510982: 1, 90: 5, 97.1250163489018: 1, 98.13010235415595: 1,
				99.46232220802563: 1, 104.03624346792651: 2, 108.43494882292202: 1,
				110.55604521958344: 1, 111.80140948635182: 1, 113.19859051364818: 1,
				116.56505117707798: 3, 120.96375653207349: 1, 122.00538320808352: 1,
				123.69006752597977: 1, 125.53767779197437: 1, 126.86989764584405: 2,
				128.65980825409008: 1, 129.80557109226515: 1, 130.6012946450045: 1,
				131.18592516570965: 1, 135: 6, 138.3664606634298: 1,
				138.81407483429035: 1, 139.3987053549955: 1, 140.19442890773485: 1,
				141.34019174590992: 1, 142.1250163489018: 1, 143.13010235415595: 2,
				143.9726266148964: 1, 144.46232220802563: 1, 145.00797980144137: 1,
				146.30993247402023: 1, 147.99461679191654: 1, 148.39249775375106: 1,
				149.0362434679265: 1, 149.7435628364707: 1, 150.25511870305775: 1,
				150.94539590092285: 1, 151.3895403340348: 1, 151.69924423399362: 1,
				153.43494882292202: 4, 155.22485943116806: 1, 155.55604521958344: 1,
				156.03751102542185: 1, 156.80140948635176: 1, 158.19859051364824: 2,
				158.96248897457815: 1, 159.44395478041656: 1, 160.01689347809997: 1,
				161.56505117707798: 1, 162.89727103094765: 1, 163.30075576600643: 1,
				164.0546040990771: 1, 164.74488129694225: 1, 165.9637565320735: 2,
				167.00538320808346: 1, 168.69006752597977: 2, 169.69515353123393: 1,
				170.53767779197437: 2, 171.25383773744477: 1, 171.86989764584405: 1,
				172.8749836510982: 1, 173.65980825409008: 1, 174.80557109226515: 1,
				175.23635830927378: 1, 180: 12, 184.7636416907262: 1,
				185.1944289077348: 1, 185.71059313749964: 1, 188.13010235415598: 1,
				188.7461622625552: 1, 189.46232220802563: 2, 191.30993247402023: 2,
				192.52880770915152: 1, 192.9946167919165: 1, 194.03624346792648: 3,
				195.25511870305778: 1, 195.94539590092288: 1, 196.69924423399362: 1,
				197.10272896905238: 1, 198.434948822922: 2, 199.9831065219: 1,
				201.80140948635182: 2, 202.61986494804043: 1, 203.19859051364818: 1,
				203.96248897457818: 1, 204.44395478041653: 1, 204.77514056883194: 1,
				206.565051177078: 4, 208.30075576600638: 1, 208.6104596659652: 1,
				209.05460409907715: 1, 209.74488129694222: 1, 210.25643716352928: 1,
				210.96375653207352: 2, 212.0053832080835: 1, 212.47119229084848: 1,
				213.69006752597977: 1, 215.53767779197437: 1, 216.0273733851036: 1,
				216.86989764584402: 1, 217.56859202882748: 1, 217.87498365109818: 1,
				218.65980825409008: 2, 219.80557109226518: 1, 220.6012946450045: 1,
				221.18592516570965: 1, 221.6335393365702: 1, 221.98721249581666: 1,
				222.27368900609375: 1, 222.51044707800085: 1, 225: 9,
				228.01278750418334: 1, 228.36646066342982: 1, 228.81407483429035: 1,
				229.3987053549955: 1, 230.19442890773482: 1, 230.71059313749964: 1,
				231.34019174590992: 1, 232.1250163489018: 1, 233.13010235415598: 2,
				234.46232220802563: 1, 235.00797980144137: 1, 236.30993247402023: 2,
				237.52880770915152: 1, 237.99461679191648: 1, 239.03624346792648: 1,
				240.25511870305778: 1, 241.3895403340348: 1, 243.43494882292202: 3,
				245.55604521958347: 1, 246.0375110254218: 1, 246.80140948635182: 1,
				248.19859051364818: 2, 249.44395478041653: 1, 250.01689347810003: 1,
				251.56505117707798: 3, 255.96375653207352: 1, 257.4711922908485: 1,
				258.69006752597977: 1, 259.695153531234: 1, 260.5376777919744: 1,
				261.86989764584405: 1, 262.8749836510982: 1, 263.6598082540901: 1,
				264.28940686250036: 1, 270: 7, 275.1944289077348: 1,
				276.3401917459099: 1, 277.1250163489018: 1, 278.13010235415595: 1,
				279.4623222080256: 1, 281.30993247402023: 2, 282.5288077091515: 1,
				284.0362434679265: 2, 285.94539590092285: 1, 288.434948822922: 1,
				291.8014094863518: 2, 293.1985905136482: 1, 294.44395478041656: 1,
				296.565051177078: 3, 298.6104596659652: 1, 299.05460409907715: 1,
				300.9637565320735: 1, 303.69006752597977: 3, 305.5376777919744: 1,
				306.86989764584405: 1, 308.6598082540901: 1, 310.6012946450045: 1,
				315: 6, 321.3401917459099: 1, 323.13010235415595: 1,
				326.30993247402023: 1, 329.03624346792645: 1, 333.434948822922: 3,
				338.1985905136482: 1, 341.565051177078: 2, 345.96375653207355: 1,
				348.69006752597977: 1, 350.5376777919744: 1,
			}},
		},
	}
	for name, tc := range tests {
		t.Run(name, func(t *testing.T) {
			actual := visible(tc.input)
			assert.Equal(t, tc.output, actual)
		})
	}
}
